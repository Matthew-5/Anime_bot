# 3. –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import math
import pandas as pd
import numpy as np
import math

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics.pairwise import cosine_similarity
from telegram.constants import ParseMode

from telegram import (
    Update, 
    ReplyKeyboardMarkup, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# 4. –ó–∞–≥—Ä—É–∑–∏–º –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
df = pd.read_excel('—Ç–∞–±–ª–∏—Ü–∞ –æ—Ü–µ–Ω–∫–∏.xlsx')
df['–î–∞—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'] = pd.to_datetime(df['–î–∞—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'])
first_date = df['–î–∞—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'].min()
df['–î–Ω–∏ –æ—Ç –ø–µ—Ä–≤–æ–π –¥–∞—Ç—ã'] = (df['–î–∞—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'] - first_date).dt.days

features = ['–ö–æ–º–µ–¥–∏—è','–î—Ä–∞–º–∞','–†–æ–º–∞–Ω—Ç–∏–∫–∞','–ì –≥–µ—Ä–æ–∏','2 –≥–µ—Ä–æ–∏','–ú–∏—Ä','–ö—Ä–∏–Ω–∂']
scaler = StandardScaler()
X_scaled = scaler.fit_transform(df[features])

kmeans = KMeans(n_clusters=5, random_state=42)
df['–ö–ª–∞—Å—Ç–µ—Ä'] = kmeans.fit_predict(X_scaled)

cluster_means = df.groupby('–ö–ª–∞—Å—Ç–µ—Ä')['–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞'].mean()
ranked_clusters = cluster_means.sort_values(ascending=False).index
rank_mapping = {ranked_clusters[i]: r for i, r in enumerate(['S','A','B','C','D'])}
df['–†–∞–Ω–≥'] = df['–ö–ª–∞—Å—Ç–µ—Ä'].map(rank_mapping)

cosine_sim = cosine_similarity(X_scaled)

def get_recommendations(idx, top_n=3):
    sim = list(enumerate(cosine_sim[idx]))
    sim = sorted(sim, key=lambda x: x[1], reverse=True)[1:1+top_n]
    inds, scores = zip(*sim)
    return df.iloc[list(inds)], list(scores)

# 5. –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏
keyboard = ReplyKeyboardMarkup(
    [['üìã –°–ø–∏—Å–æ–∫', 'üîÆ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']],
    resize_keyboard=True
)

# 6a. /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–æ—Ä –∞–Ω–∏–º–µ.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:\n"
        "üìã ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ\n"
        "üîÆ ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "üìä ‚Äî —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–¥–Ω–æ–º—É –∞–Ω–∏–º–µ",
        reply_markup=keyboard
    )

async def send_anime_page(update_or_query, context, page: int, edit=False):
    per_page = 15
    total = len(df)
    pages = math.ceil(total / per_page)
    start = page * per_page
    end = min(start + per_page, total)
    
    # 1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
    text = f"<b>üìÉ –°–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{pages}</b>\n"
    
    # 2) –°—Ç—Ä–æ–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏, –Ω–∞–∑–≤–∞–Ω–∏–µ–º, —Ä–∞–Ω–≥–æ–º –∏ –æ—Ü–µ–Ω–∫–æ–π
    for i, row in df.iloc[start:end].iterrows():
        text += (
            f"\n<code>{i:>2}</code>  <b>{row['–ù–∞–∑–≤–∞–Ω–∏–µ']}</b>\n"
            f"   üéñ <b>–†–∞–Ω–≥:</b> <code>{row['–†–∞–Ω–≥']}</code>   ‚≠êÔ∏è <b>–û—Ü–µ–Ω–∫–∞:</b> <code>{row['–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞']:.2f}</code>\n"
        )
    
    # 3) Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_{page-1}"))
    if page < pages - 1:
        buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"list_{page+1}"))
    markup = InlineKeyboardMarkup([buttons]) if buttons else None

    # 4) –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if edit:
        await update_or_query.edit_message_text(
            text,
            reply_markup=markup,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        await update_or_query.answer()
    else:
        await update_or_query.message.reply_text(
            text,
            reply_markup=markup,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )

async def list_anime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await send_anime_page(update, context, page=0, edit=False)

async def list_pagination_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    page = int(query.data.split('_')[1])
    await send_anime_page(query, context, page=page, edit=True)

# 6c. –ö–Ω–æ–ø–∫–∞ ¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è¬ª
async def recommend_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data['awaiting_recommend'] = True
    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–Ω–∏–º–µ (0‚Äì{len(df)-1}) –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:",
        reply_markup=keyboard
    )

# 6d. –ö–Ω–æ–ø–∫–∞ ¬´–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª
async def stats_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data['awaiting_stats'] = True
    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–Ω–∏–º–µ (0‚Äì{len(df)-1}) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=keyboard
    )

# 6e. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞ ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if context.user_data.get('awaiting_recommend'):
        idx = int(update.message.text.strip())
        recs, scores = get_recommendations(idx)
        base = df.iloc[idx]['–ù–∞–∑–≤–∞–Ω–∏–µ']
        
        # 1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
        msg = f"<b>üîÆ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è ¬´<i>{base}</i>¬ª</b>\n"
        
        # 2) –°–∞–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        for n, (i, row) in enumerate(recs.iterrows(), start=1):
            genres = [g for g in ['–ö–æ–º–µ–¥–∏—è','–î—Ä–∞–º–∞','–†–æ–º–∞–Ω—Ç–∏–∫–∞'] if row[g]==1]
            msg += (
                f"\n<b>{n}. {row['–ù–∞–∑–≤–∞–Ω–∏–µ']}</b>\n"
                f"   üéñ <b>–†–∞–Ω–≥:</b> <code>{row['–†–∞–Ω–≥']}</code>\n"
                f"   ‚≠êÔ∏è <b>–û—Ü–µ–Ω–∫–∞:</b> <code>{row['–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞']:.2f}</code>\n"
                f"   üîó <b>–°—Ö–æ–∂–µ—Å—Ç—å:</b> <code>{scores[n-1]:.2f}</code>\n"
            )
        await update.message.reply_text(
            msg,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        context.user_data.clear()
        return

    # === –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
    if context.user_data.get('awaiting_stats'):
        idx = int(update.message.text.strip())
        row = df.iloc[idx]
        
        # 1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
        stat = f"<b>üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ¬´<i>{row['–ù–∞–∑–≤–∞–Ω–∏–µ']}</i>¬ª</b>\n"
        
        # 2) –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∫—Ä–∞—Å–∏–≤–æ —Å–ø–∏—Å–∫–æ–º
        for col, val in row.items():
            if isinstance(val, float):
                val = f"{val:.2f}"
            elif pd.isna(val):
                val = "‚Äî"
            elif isinstance(val, pd.Timestamp):
                val = val.strftime('%Y-%m-%d')
            stat += f"\n‚Ä¢ <b>{col}:</b> <code>{val}</code>"
        
        await update.message.reply_text(
            stat,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        context.user_data.clear()
        return

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=keyboard)

# 7. –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
BOT_TOKEN = "8152150712:AAHbtVMMjoh-3SyjPQTUVE8BYHYF0oBTioE"
app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.Regex('^üìã –°–ø–∏—Å–æ–∫$'), list_anime))
app.add_handler(CallbackQueryHandler(list_pagination_handler, pattern=r"^list_\d+$"))
app.add_handler(MessageHandler(filters.Regex('^üîÆ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è$'), recommend_button))
app.add_handler(MessageHandler(filters.Regex('^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$'), stats_button))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–π‚Ä¶")
app.run_polling()
